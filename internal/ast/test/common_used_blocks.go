package test

// Primitive Blocks that are used in multiple other blocks
var (
	WHITESPACE_BLOCK              = &PrimitiveBlock{Content: " ", BlockType: WhitespaceBlockType}
	PHP_TAG_BLOCK                 = &PrimitiveBlock{Content: "<?php", BlockType: PhpTagBlockType}
	STATIC_BLOCK                  = &PrimitiveBlock{Content: "static", BlockType: StaticBlockType}
	EQUALS_BLOCK                  = &PrimitiveBlock{Content: "=", BlockType: EqualsBlockType}
	GLOBAL_BLOCK                  = &PrimitiveBlock{Content: "global", BlockType: GlobalBlockType}
	NAMESPACE_BLOCK               = &PrimitiveBlock{Content: "namespace", BlockType: NamespaceBlockType}
	USE_BLOCK                     = &PrimitiveBlock{Content: "use", BlockType: UseBlockType}
	AS_BLOCK                      = &PrimitiveBlock{Content: "as", BlockType: AsBlockType}
	FUNCTION_BLOCK                = &PrimitiveBlock{Content: "function", BlockType: FunctionBlockType}
	CONST_BLOCK                   = &PrimitiveBlock{Content: "const", BlockType: ConstBlockType}
	BACKSLASH_BLOCK               = &PrimitiveBlock{Content: "\\", BlockType: BackslashBlockType}
	OPEN_BRACE_BLOCK              = &PrimitiveBlock{Content: "{", BlockType: OpenBraceBlockType}
	CLOSE_BRACE_BLOCK             = &PrimitiveBlock{Content: "}", BlockType: CloseBraceBlockType}
	TRAIT_BLOCK                   = &PrimitiveBlock{Content: "trait", BlockType: TraitBlockType}
	INTERFACE_BLOCK               = &PrimitiveBlock{Content: "interface", BlockType: InterfaceBlockType}
	EXTENDS_BLOCK                 = &PrimitiveBlock{Content: "extends", BlockType: ExtendsBlockType}
	ENUM_BLOCK                    = &PrimitiveBlock{Content: "enum", BlockType: EnumBlockType}
	COLON_BLOCK                   = &PrimitiveBlock{Content: ":", BlockType: ColonBlockType}
	ARRAY_TYPE_BLOCK              = &PrimitiveBlock{Content: "array", BlockType: ArrayTypeBlockType}
	CALLABLE_TYPE_BLOCK           = &PrimitiveBlock{Content: "callable", BlockType: CallableTypeBlockType}
	ITERABLE_TYPE_BLOCK           = &PrimitiveBlock{Content: "iterable", BlockType: IterableTypeBlockType}
	BOOL_TYPE_BLOCK               = &PrimitiveBlock{Content: "bool", BlockType: BoolTypeBlockType}
	FLOAT_TYPE_BLOCK              = &PrimitiveBlock{Content: "float", BlockType: FloatTypeBlockType}
	STRING_TYPE_BLOCK             = &PrimitiveBlock{Content: "string", BlockType: StringTypeBlockType}
	INT_TYPE_BLOCK                = &PrimitiveBlock{Content: "int", BlockType: IntTypeBlockType}
	VOID_TYPE_BLOCK               = &PrimitiveBlock{Content: "void", BlockType: VoidTypeBlockType}
	MIXED_TYPE_BLOCK              = &PrimitiveBlock{Content: "mixed", BlockType: MixedTypeBlockType}
	FALSE_TYPE_BLOCK              = &PrimitiveBlock{Content: "false", BlockType: FalseTypeBlockType}
	NULL_TYPE_BLOCK               = &PrimitiveBlock{Content: "null", BlockType: NullTypeBlockType}
	TRUE_TYPE_BLOCK               = &PrimitiveBlock{Content: "true", BlockType: TrueTypeBlockType}
	CASE_BLOCK                    = &PrimitiveBlock{Content: "case", BlockType: CaseBlockType}
	CLASS_BLOCK                   = &PrimitiveBlock{Content: "class", BlockType: ClassBlockType}
	FINAL_BLOCK                   = &PrimitiveBlock{Content: "final", BlockType: FinalBlockType}
	ABSTRACT_BLOCK                = &PrimitiveBlock{Content: "abstract", BlockType: AbstractBlockType}
	READONLY_BLOCK                = &PrimitiveBlock{Content: "readonly", BlockType: ReadonlyBlockType}
	IMPLEMENTS_BLOCK              = &PrimitiveBlock{Content: "implements", BlockType: ImplementsBlockType}
	ARROW_FUNCTION_SEQUENCE_BLOCK = &PrimitiveBlock{Content: "=>", BlockType: ArrowFunctionSequenceBlockType}
	VAR_BLOCK                     = &PrimitiveBlock{Content: "var", BlockType: VarBlockType}
	INSTEAD_OF_BLOCK              = &PrimitiveBlock{Content: "insteadof", BlockType: InsteadOfBlockType}
	PUBLIC_BLOCK                  = &PrimitiveBlock{Content: "public", BlockType: PublicBlockType}
	PROTECTED_BLOCK               = &PrimitiveBlock{Content: "protected", BlockType: ProtectedBlockType}
	PRIVATE_BLOCK                 = &PrimitiveBlock{Content: "private", BlockType: PrivateBlockType}
	OPEN_PAREN_BLOCK              = &PrimitiveBlock{Content: "(", BlockType: OpenParenBlockType}
	CLOSE_PAREN_BLOCK             = &PrimitiveBlock{Content: ")", BlockType: CloseParenBlockType}
	COMMA_BLOCK                   = &PrimitiveBlock{Content: ",", BlockType: CommaBlockType}
	FN_BLOCK                      = &PrimitiveBlock{Content: "fn", BlockType: FnBlockType}
	THREE_DOT_BLOCK               = &PrimitiveBlock{Content: "...", BlockType: ThreeDotBlockType}
	QUESTION_BLOCK                = &PrimitiveBlock{Content: "?", BlockType: QuestionBlockType}
	NEVER_BLOCK                   = &PrimitiveBlock{Content: "never", BlockType: NeverBlockType}
	ECHO_BLOCK                    = &PrimitiveBlock{Content: "echo", BlockType: EchoBlockType}
	EXIT_BLOCK                    = &PrimitiveBlock{Content: "exit", BlockType: ExitBlockType}
	UNSET_BLOCK                   = &PrimitiveBlock{Content: "unset", BlockType: UnsetBlockType}
	DECLARE_BLOCK                 = &PrimitiveBlock{Content: "declare", BlockType: DeclareBlockType}
	ENDDECLARE_BLOCK              = &PrimitiveBlock{Content: "enddeclare", BlockType: EnddeclareBlockType}
	TICKS_BLOCK                   = &PrimitiveBlock{Content: "ticks", BlockType: TicksBlockType}
	ENCODING_BLOCK                = &PrimitiveBlock{Content: "encoding", BlockType: EncodingBlockType}
	STRIC_TYPES_BLOCK             = &PrimitiveBlock{Content: "strict_types", BlockType: StrictTypesBlockType}
	TRY_BLOCK                     = &PrimitiveBlock{Content: "try", BlockType: TryBlockType}
	CATCH_BLOCK                   = &PrimitiveBlock{Content: "catch", BlockType: CatchBlockType}
	FINALLY_BLOCK                 = &PrimitiveBlock{Content: "finally", BlockType: FinallyBlockType}
	GOTO_BLOCK                    = &PrimitiveBlock{Content: "goto", BlockType: GotoBlockType}
	CONTINUE_BLOCK                = &PrimitiveBlock{Content: "continue", BlockType: ContinueBlockType}
	BREAK_BLOCK                   = &PrimitiveBlock{Content: "break", BlockType: BreakBlockType}
	RETURN_BLOCK                  = &PrimitiveBlock{Content: "return", BlockType: ReturnBlockType}
	THROW_BLOCK                   = &PrimitiveBlock{Content: "throw", BlockType: ThrowBlockType}
	WHILE_BLOCK                   = &PrimitiveBlock{Content: "while", BlockType: WhileBlockType}
	ENDWHILE_BLOCK                = &PrimitiveBlock{Content: "endwhile", BlockType: EndwhileBlockType}
	DO_BLOCK                      = &PrimitiveBlock{Content: "do", BlockType: DoBlockType}
	FOR_BLOCK                     = &PrimitiveBlock{Content: "for", BlockType: ForBlockType}
	SEMICOLON_BLOCK               = &PrimitiveBlock{Content: ";", BlockType: SemicolonBlockType}
	ENDFOR_BLOCK                  = &PrimitiveBlock{Content: "endfor", BlockType: EndforBlockType}
	FOREACH_BLOCK                 = &PrimitiveBlock{Content: "foreach", BlockType: ForeachBlockType}
	ENDFOREACH_BLOCK              = &PrimitiveBlock{Content: "endforeach", BlockType: EndforeachBlockType}
	IF_BLOCK                      = &PrimitiveBlock{Content: "if", BlockType: IfBlockType}
	ENDIF_BLOCK                   = &PrimitiveBlock{Content: "endif", BlockType: EndifBlockType}
	ELSEIF_BLOCK                  = &PrimitiveBlock{Content: "elseif", BlockType: ElseifBlockType}
	ELSE_BLOCK                    = &PrimitiveBlock{Content: "else", BlockType: ElseBlockType}
	MATCH_BLOCK                   = &PrimitiveBlock{Content: "match", BlockType: MatchBlockType}
	DEFAULT_BLOCK                 = &PrimitiveBlock{Content: "default", BlockType: DefaultBlockType}
	SWITCH_BLOCK                  = &PrimitiveBlock{Content: "switch", BlockType: SwitchBlockType}
	ENDSWITCH_BLOCK               = &PrimitiveBlock{Content: "endswitch", BlockType: EndswitchBlockType}
	PLUS_BLOCK                    = &PrimitiveBlock{Content: "+", BlockType: PlusBlockType}
	MINUS_BLOCK                   = &PrimitiveBlock{Content: "-", BlockType: MinusBlockType}
	TILDE_BLOCK                   = &PrimitiveBlock{Content: "~", BlockType: TildeBlockType}
	EXCLAMATION_BLOCK             = &PrimitiveBlock{Content: "!", BlockType: ExclamationBlockType}
	AT_BLOCK                      = &PrimitiveBlock{Content: "@", BlockType: AtBlockType}
	CLONE_BLOCK                   = &PrimitiveBlock{Content: "clone", BlockType: CloneBlockType}
	DOUBLE_COLON_BLOCK            = &PrimitiveBlock{Content: "::", BlockType: DoubleColonBlockType}
	PRINT_BLOCK                   = &PrimitiveBlock{Content: "print", BlockType: PrintBlockType}
	NEW_BLOCK                     = &PrimitiveBlock{Content: "new", BlockType: NewBlockType}
	DOUBLE_MINUS_BLOCK            = &PrimitiveBlock{Content: "--", BlockType: DoubleMinusBlockType}
	DOUBLE_PLUS_BLOCK             = &PrimitiveBlock{Content: "++", BlockType: DoublePlusBlockType}
	AMPERSAND_BLOCK               = &PrimitiveBlock{Content: "&", BlockType: AmpersandBlockType}
	EXPONENT_EQUAL_BLOCK          = &PrimitiveBlock{Content: "**=", BlockType: ExponentEqualBlockType}
	MULTIPLY_EQUAL_BLOCK          = &PrimitiveBlock{Content: "*=", BlockType: MultiplyEqualBlockType}
	DIVIDE_EQUAL_BLOCK            = &PrimitiveBlock{Content: "/=", BlockType: DivideEqualBlockType}
	MODULO_EQUAL_BLOCK            = &PrimitiveBlock{Content: "%=", BlockType: ModuloEqualBlockType}
	PLUS_EQUAL_BLOCK              = &PrimitiveBlock{Content: "+=", BlockType: PlusEqualBlockType}
	MINUS_EQUAL_BLOCK             = &PrimitiveBlock{Content: "-=", BlockType: MinusEqualBlockType}
	DOT_EQUAL_BLOCK               = &PrimitiveBlock{Content: ".=", BlockType: DotEqualBlockType}
	LEFT_SHIFT_EQUAL_BLOCK        = &PrimitiveBlock{Content: "<<=", BlockType: LeftShiftEqualBlockType}
	RIGHT_SHIFT_EQUAL_BLOCK       = &PrimitiveBlock{Content: ">>=", BlockType: RightShiftEqualBlockType}
	AND_EQUAL_BLOCK               = &PrimitiveBlock{Content: "&=", BlockType: AndEqualBlockType}
	XOR_EQUAL_BLOCK               = &PrimitiveBlock{Content: "^=", BlockType: XorEqualBlockType}
	OR_EQUAL_BLOCK                = &PrimitiveBlock{Content: "|=", BlockType: OrEqualBlockType}
	NULL_COALESCE_EQUAL_BLOCK     = &PrimitiveBlock{Content: "??=", BlockType: NullCoalesceEqualBlockType}
	MEMBER_ACCESS_BLOCK           = &PrimitiveBlock{Content: "->", BlockType: MemberAccessBlockType}
	MEMBER_ACCESS_NULL_BLOCK      = &PrimitiveBlock{Content: "?->", BlockType: MemberAccessNullBlockType}
	OPEN_BRACKET_BLOCK            = &PrimitiveBlock{Content: "[", BlockType: OpenBracketBlockType}
	CLOSE_BRACKET_BLOCK           = &PrimitiveBlock{Content: "]", BlockType: CloseBracketBlockType}
	SELF_BLOCK                    = &PrimitiveBlock{Content: "self", BlockType: SelfBlockType}
	PARENT_BLOCK                  = &PrimitiveBlock{Content: "parent", BlockType: ParentBlockType}
	TRUE_BLOCK                    = &PrimitiveBlock{Content: "true", BlockType: TrueBlockType}
	FALSE_BLOCK                   = &PrimitiveBlock{Content: "false", BlockType: FalseBlockType}
	OPEN_ATTRIBUTE_BLOCK          = &PrimitiveBlock{Content: "#[", BlockType: OpenAttributeBlockType}
	BYTE_STRING_BLOCK             = &PrimitiveBlock{Content: "b'", BlockType: ByteStringBlockType}
	SINGLE_QUOTE_BLOCK            = &PrimitiveBlock{Content: "'", BlockType: SingleQuoteBlockType}
	DOUBLE_QUOTE_BLOCK            = &PrimitiveBlock{Content: "\"", BlockType: DoubleQuoteBlockType}
	HEREDOC_OPEN_BLOCK            = &PrimitiveBlock{Content: "<<<", BlockType: HeredocOpenBlockType}
	NEWLINE_BLOCK                 = &PrimitiveBlock{Content: "\n", BlockType: NewlineBlockType}
	SHELL_EXEC_BLOCK              = &PrimitiveBlock{Content: "`", BlockType: ShellExecBlockType}
	DOLLAR_BLOCK                  = &PrimitiveBlock{Content: "$", BlockType: DollarBlockType}
	YIELD_BLOCK                   = &PrimitiveBlock{Content: "yield", BlockType: YieldBlockType}
	FROM_BLOCK                    = &PrimitiveBlock{Content: "from", BlockType: FromBlockType}
	INSTANCEOF_BLOCK              = &PrimitiveBlock{Content: "instanceof", BlockType: InstanceofBlockType}
	NULL_COALESCE_BLOCK           = &PrimitiveBlock{Content: "??", BlockType: NullCoalesceBlockType}
	EXPONENT_BLOCK                = &PrimitiveBlock{Content: "**", BlockType: ExponentBlockType}
	AND_BLOCK                     = &PrimitiveBlock{Content: "and", BlockType: AndBlockType}
	OR_BLOCK                      = &PrimitiveBlock{Content: "or", BlockType: OrBlockType}
	XOR_BLOCK                     = &PrimitiveBlock{Content: "xor", BlockType: XorBlockType}
	LOGICAL_OR_BLOCK              = &PrimitiveBlock{Content: "||", BlockType: LogicalOrBlockType}
	LOGICAL_AND_BLOCK             = &PrimitiveBlock{Content: "&&", BlockType: LogicalAndBlockType}
	BITWISE_OR_BLOCK              = &PrimitiveBlock{Content: "|", BlockType: BitwiseOrBlockType}
	BITWISE_XOR_BLOCK             = &PrimitiveBlock{Content: "^", BlockType: BitwiseXorBlockType}
	BITWISE_AND_BLOCK             = &PrimitiveBlock{Content: "&", BlockType: BitwiseAndBlockType}
	EQUAL_BLOCK                   = &PrimitiveBlock{Content: "==", BlockType: EqualBlockType}
	NOT_EQUAL_BLOCK               = &PrimitiveBlock{Content: "!=", BlockType: NotEqualBlockType} // Equivalent to "<>"
	IDENTICAL_BLOCK               = &PrimitiveBlock{Content: "===", BlockType: IdenticalBlockType}
	NOT_IDENTICAL_BLOCK           = &PrimitiveBlock{Content: "!==", BlockType: NotIdenticalBlockType}
	LESS_THAN_BLOCK               = &PrimitiveBlock{Content: "<", BlockType: LessThanBlockType}
	GREATER_THAN_BLOCK            = &PrimitiveBlock{Content: ">", BlockType: GreaterThanBlockType}
	LESS_THAN_OR_EQUAL_BLOCK      = &PrimitiveBlock{Content: "<=", BlockType: LessThanOrEqualBlockType}
	GREATER_THAN_OR_EQUAL_BLOCK   = &PrimitiveBlock{Content: ">=", BlockType: GreaterThanOrEqualBlockType}
	SPACESHIP_BLOCK               = &PrimitiveBlock{Content: "<=>", BlockType: SpaceshipBlockType}
	LEFT_SHIFT_BLOCK              = &PrimitiveBlock{Content: "<<", BlockType: LeftShiftBlockType}
	RIGHT_SHIFT_BLOCK             = &PrimitiveBlock{Content: ">>", BlockType: RightShiftBlockType}
	CONCATENATION_BLOCK           = &PrimitiveBlock{Content: ".", BlockType: ConcatenationBlockType}
	MULTIPLY_BLOCK                = &PrimitiveBlock{Content: "*", BlockType: MultiplyBlockType}
	DIVIDE_BLOCK                  = &PrimitiveBlock{Content: "/", BlockType: DivideBlockType}
	MODULO_BLOCK                  = &PrimitiveBlock{Content: "%", BlockType: ModuloBlockType}
	INCLUDE_BLOCK                 = &PrimitiveBlock{Content: "include", BlockType: IncludeBlockType}
	INCLUDE_ONCE_BLOCK            = &PrimitiveBlock{Content: "include_once", BlockType: IncludeOnceBlockType}
	REQUIRE_BLOCK                 = &PrimitiveBlock{Content: "require", BlockType: RequireBlockType}
	REQUIRE_ONCE_BLOCK            = &PrimitiveBlock{Content: "require_once", BlockType: RequireOnceBlockType}
	HASHTAG_BLOCK                 = &PrimitiveBlock{Content: "#", BlockType: HashtagBlockType}
)
